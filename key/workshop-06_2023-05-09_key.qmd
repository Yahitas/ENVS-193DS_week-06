---
title: "Week 6 coding workshop key"
author: "insert your name here"
format: html
toc: true
---

# 0. load in packages and data

## packages

```{r libraries, message = FALSE}
library(tidyverse) # general usage
library(here) # organization
library(plotly) # interactive plots
library(skimr) # quick glimpses at data
library(naniar) # visualizing missing data
library(magick) # inserting images into plots
library(NatParksPalettes) # one example of color palette package
library(wesanderson) # another example of a color palette package
library(patchwork) # putting plots together
```

## data

New functions:  
- `year`  
- `month`  
- `fct_relevel`  
- `paste`/`paste0`  
- `skim`  
- `str_detect`

```{r data, message = FALSE}
whales <- read_csv(here("data", "Graywhale_watching_2007_2019.csv"))
```

looking at missing data:

```{r skimming-whales}
skim(whales)
```

visualizing missing data:

```{r missing-data-vis}
gg_miss_var(whales)
```

wrangling:

```{r wrangling-whales}
whales_clean <- whales %>% 
  # extract year and month
  mutate(year = lubridate::year(date),
         month = lubridate::month(date)) %>% 
  # make month numbers into names
  mutate(month_name = case_when(
    month == 2 ~ "February",
    month == 3 ~ "March",
    month == 4 ~ "April",
    month == 5 ~ "May"), 
    # make the factor levels
    month_name = forcats::as_factor(month_name),
    # reorder the months to be in the right order
    month_name = forcats::fct_relevel(month_name, "February", "March", "April", "May")) %>% 
  mutate(condition_new = case_when(
    str_detect(condition, "Excellent") ~ "Excellent",
    str_detect(condition, "Good") ~ "Good",
    str_detect(condition, "Fair") ~ "Fair",
    str_detect(condition, "Poor") ~ "Poor"),
  # relevel the conditions in a way that makes sense (could be the other way)
    condition_new = fct_relevel(condition_new, "Excellent", "Good", "Fair", "Poor")) %>% 
  # create a new column called marker text for interactivity
  mutate(marker_text = paste0("Date: ", date, "<br>",
                              "Total whales spotted: ", total))
```

# 1. visualizing whales

## a. 2019 whales

```{r whales-2019}
# filter clean df to only include 2019
whales_2019 <- whales_clean %>% 
  filter(year == 2019)

# read in gray whale png as raster
whale_image <- magick::image_read(here("images", "noaa-gray-whale.png")) %>% 
  as.raster()

# make a boxplot
whales_2019_boxplot <- ggplot(data = whales_2019, aes(x = month_name, y = total)) +
  geom_boxplot(aes(fill = month_name), alpha = 0.8) +
  # new way to make a jitter: geom_point + position_jitter
  # somewhat better because you have more control over what you're doing!
  geom_point(aes(color = month_name), position = position_jitter(width = 0.3, height = 0, seed = 1)) +
  # use palettes from national parks palette package
  scale_color_manual(values = natparks.pals("Olympic", 4)) +
  scale_fill_manual(values = natparks.pals("Olympic", 4)) +
  theme_light() +
  theme(legend.position = "none") +
  labs(x = "Month", y = "Daily whale sightings", 
       title = "Gray whales counted off of Coal Oil Point in 2019") +
  # add the gray whale image to the plot
  annotation_raster(whale_image, xmin = 2.5, xmax = 4.5, ymin = 30, ymax = 60) 

whales_2019_boxplot
```

## b. 2018 whales

```{r whales-2018}
# read in another gray whale image, this time from a URL
whale_image2 <- image_read("https://www.acsonline.org/assets/images/eschrichtius-robustus.png") %>% 
  as.raster()

whales_2018_dots <- whales_clean %>% 
  filter(year == 2018) %>% 
  ggplot(aes(x = month_name, y = total)) +
  geom_point(aes(color = month_name), position = position_jitter(width = 0.3, height = 0, seed = 1)) +
  stat_summary(fun = median, fun.min = median, fun.max = median,
                 geom = "crossbar", width = 0.5) +
  scale_color_manual(values = wes_palette("Zissou1", 4)) +
  scale_fill_manual(values = wes_palette("Zissou1", 4)) +
  theme_light() +
  theme(legend.position = "none") +
  labs(x = "Month", y = "Daily whale sightings", 
       title = "Gray whales counted off of Coal Oil Point in 2018") +
  annotation_raster(whale_image2, xmin = 0.5, xmax = 2, ymin = 6, ymax = 7) 
  
whales_2018_dots
```

## c. whales stacked plots  

```{r putting-plots-together, fig.width = 8, fig.height = 10}
whales_together <- whales_2018_dots / whales_2019_boxplot

whales_together
```


# 2. saving the plot

```{r saving-whales-boxplot, eval = FALSE}
ggsave(here("figures", paste0("whales_boxplots_", today(), ".png")), 
       whales_together, 
       width = 8, height = 10, units = "in")
```

# 3. making the boxplot interactive

```{r basic-ggplotly}
whales_2019_interactive <- ggplotly(whales_2019_boxplot)

whales_2019_interactive 
```

# 4. making the boxplot interactive, but better

```{r better-interactive}
# go back up to whales_clean and create a new column for the marker

whales_2019_boxplot_v2 <- whales_2019 %>% 
  ggplot(aes(x = month_name, y = total, group = month_name, text = marker_text)) +
  scale_color_manual(values = natparks.pals("Olympic", 4)) +
  scale_fill_manual(values = natparks.pals("Olympic", 4)) +
  geom_boxplot(aes(fill = month_name), alpha = 0.8) +
  geom_point(aes(color = month_name), position = position_jitter(width = 0.3, height = 0, seed = 1)) +
  theme_light() +
  theme(legend.position = "none") +
  labs(x = "Month", y = "Daily whale sightings", 
       title = "Gray whales counted off of Coal Oil Point") +
  annotation_raster(whale_image, xmin = 3, xmax = 4.5, ymin = 40, ymax = 60)

whales_2019_boxplot_v2

whales_2019_interactive_v2 <- ggplotly(whales_2019_boxplot_v2, tooltip = "text")

whales_2019_interactive_v2
```

Last plot (if we have time): how would you show the variation in whale count (if there is any) across viewing conditions?


